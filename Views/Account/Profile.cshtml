@using System.Security.Claims

@model ContentCraft_studio.Models.UserProfileViewModel
@{
    ViewData["Title"] = "Profile";
}

<div class="min-h-screen bg-gray-100 py-12 px-4 sm:px-6 lg:px-8">
    <div class="profile-container max-w-3xl mx-auto bg-white shadow-lg rounded-lg overflow-hidden">
        <div class="px-6 py-8">
            <div class="profile-header text-center">
                <h1 class="text-3xl font-bold text-gray-900 mb-8">Your Profile</h1>
                <div class="profile-avatar">
                    @if (User.Claims.FirstOrDefault(c => c.Type == "picture")?.Value != null)
                    {
                        <img class="h-32 w-32 rounded-full mx-auto" src="@User.Claims.FirstOrDefault(c => c.Type == "picture")?.Value" alt="Profile picture">
                    }
                    else
                    {
                        <div class="h-32 w-32 rounded-full mx-auto bg-gray-300 flex items-center justify-center">
                            <span class="text-4xl text-gray-600">@(User.Identity?.Name?[0].ToString().ToUpper() ?? "U")</span>
                        </div>
                    }
                </div>
                
                <div class="mt-4 space-y-2">
                    <div class="inline-flex items-center space-x-2">
                        <h2 id="nickname-display" class="text-2xl font-bold text-gray-900">@User.Identity?.Name</h2>
                        <button onclick="editField('nickname')" class="text-gray-400 hover:text-gray-600">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                            </svg>
                        </button>
                    </div>
                    <input id="nickname-edit" type="text" class="hidden mt-1 text-2xl font-bold text-center border-b-2 border-indigo-500 focus:outline-none" value="@User.Identity?.Name">
                </div>
            </div>

            <div class="profile-section mt-8 border-t border-gray-200 pt-8">
                <h3 class="text-lg font-medium text-gray-900">Auth0 Profile Information (Read-only)</h3>
                <dl class="mt-4 grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                    <div class="profile-field sm:col-span-1">
                        <dt class="text-sm font-medium text-gray-500">NAME</dt>
                        <dd class="mt-1 text-sm text-gray-900">@User.Identity?.Name</dd>
                    </div>
                    
                    <div class="profile-field sm:col-span-1">
                        <dt class="text-sm font-medium text-gray-500">Email</dt>
                        <dd class="mt-1 text-sm text-gray-900">@User.Claims.FirstOrDefault(c => c.Type == "email")?.Value</dd>
                    </div>

                    @foreach (var claim in User.Claims.Where(c => 
                        !new[] { "picture", "email_verified", "locale", "updated_at", "sid", ClaimTypes.NameIdentifier }.Contains(c.Type) && 
                        !c.Type.Contains("urn:")))
                    {
                        <div class="profile-field sm:col-span-1">
                            <dt class="text-sm font-medium text-gray-500">@claim.Type.Split('/').Last().ToUpper()</dt>
                            <dd class="mt-1 text-sm text-gray-900">@claim.Value</dd>
                        </div>
                    }
                </dl>
            </div>

            <div class="profile-section mt-8 border-t border-gray-200 pt-8">
                <h3 class="text-lg font-medium text-gray-900">Additional Profile Information (Editable)</h3>
                <dl class="mt-4 grid grid-cols-1 gap-x-4 gap-y-6 sm:grid-cols-2">
                    <div class="profile-field sm:col-span-1">
                        <dt class="text-sm font-medium text-gray-500">Bio</dt>
                        <dd id="bio-display" class="mt-1 text-sm text-gray-900">@(Model?.Bio ?? "No bio available")</dd>
                        <input id="bio-edit" type="text" class="hidden mt-1 w-full text-sm border-gray-300 rounded-md" value="@(Model?.Bio ?? "")" />
                    </div>

                    <div class="profile-field sm:col-span-1">
                        <dt class="text-sm font-medium text-gray-500">Phone Number</dt>
                        <dd id="phone-display" class="mt-1 text-sm text-gray-900">@(Model?.PhoneNumber ?? "Not provided")</dd>
                        <input id="phone-edit" type="tel" class="hidden mt-1 w-full text-sm border-gray-300 rounded-md" value="@(Model?.PhoneNumber ?? "")" />
                    </div>

                    <div class="profile-field sm:col-span-1">
                        <dt class="text-sm font-medium text-gray-500">Location</dt>
                        <dd id="location-display" class="mt-1 text-sm text-gray-900">@(Model?.Location ?? "Not provided")</dd>
                        <input id="location-edit" type="text" class="hidden mt-1 w-full text-sm border-gray-300 rounded-md" value="@(Model?.Location ?? "")" />
                    </div>
                </dl>
            </div>

            <div class="profile-actions mt-8 border-t border-gray-200 pt-8">
                <div class="flex justify-between">
                    <button class="edit-button inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" onclick="editProfile()">
                        Edit Profile
                    </button>
                    <a href="/Account/Logout" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        Sign Out
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function editField(field) {
            const displayEl = document.getElementById(`${field}-display`);
            const editEl = document.getElementById(`${field}-edit`);
            
            displayEl.classList.add('hidden');
            editEl.classList.remove('hidden');
            editEl.focus();

            editEl.addEventListener('blur', async () => {
                const newValue = editEl.value.trim();
                if (newValue) {
                    try {
                        const response = await fetch('/Account/UpdateProfile', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                [field]: newValue
                            })
                        });

                        const result = await response.json();
                        if (result.success) {
                            displayEl.textContent = newValue;
                        } else {
                            alert('Failed to update profile');
                        }
                    } catch (error) {
                        console.error('Error updating profile:', error);
                        alert('Failed to update profile');
                    }
                }
                
                displayEl.classList.remove('hidden');
                editEl.classList.add('hidden');
            });

            editEl.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    editEl.blur();
                }
            });
        }

        function editProfile() {
            // Get all profile fields
            const fields = document.querySelectorAll('.profile-field');
            
            fields.forEach(field => {
                const displayElement = field.querySelector('dd');
                const label = field.querySelector('dt').textContent;
                
                // Skip certain fields that shouldn't be editable
                if (label === 'Member Since') return;
                
                const currentValue = displayElement.textContent;
                
                // Create input element
                const input = document.createElement('input');
                input.type = 'text';
                input.value = currentValue;
                input.className = 'mt-1 text-sm text-gray-900 w-full p-2 border rounded focus:ring-2 focus:ring-indigo-500';
                
                // Store original content
                const originalContent = displayElement.innerHTML;
                
                // Replace content with input
                displayElement.innerHTML = '';
                displayElement.appendChild(input);
                
                // Focus the input
                input.focus();
                
                // Handle input blur
                input.addEventListener('blur', async () => {
                    const newValue = input.value.trim();
                    if (newValue && newValue !== currentValue) {
                        try {
                            const response = await fetch('/Account/UpdateProfile', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    [label.toLowerCase()]: newValue
                                })
                            });
                            
                            const result = await response.json();
                            if (result.success) {
                                displayElement.innerHTML = newValue;
                                
                                // Show success notification
                                showNotification('Profile updated successfully', 'success');
                            } else {
                                displayElement.innerHTML = originalContent;
                                showNotification('Failed to update profile', 'error');
                            }
                        } catch (error) {
                            console.error('Error updating profile:', error);
                            displayElement.innerHTML = originalContent;
                            showNotification('Failed to update profile', 'error');
                        }
                    } else {
                        displayElement.innerHTML = originalContent;
                    }
                });
                
                // Handle enter key
                input.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        input.blur();
                    }
                });
            });
        }
        
        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `notification fixed top-4 right-4 p-4 rounded-lg text-white ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
            notification.textContent = message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transition = 'opacity 0.5s ease';
                setTimeout(() => notification.remove(), 500);
            }, 3000);
        }
    </script>
}