@model ContentCraft_studio.Models.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}
<div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between mb-10">
            <div>
                <h1 class="text-4xl font-extrabold text-gray-900 tracking-tight">Welcome back, <span class="text-indigo-600">@Model.User.Name!</span></h1>
                <p class="mt-2 text-sm text-gray-600">Here's what's happening with your account today.</p>
            </div>
            <a href="@Url.Action("Profile", "Account")" class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200">
                <svg class="-ml-1 mr-3 h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Edit Profile
            </a>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            <div class="bg-white overflow-hidden shadow-lg rounded-xl hover:shadow-xl transition-shadow duration-300 transform hover:-translate-y-1">
                <div class="p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-gradient-to-br from-indigo-500 to-indigo-600 rounded-xl p-4 shadow-inner">
                            <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                            </svg>
                        </div>
                        <div class="ml-6 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Total Usage</dt>
                                <dd class="text-2xl font-bold text-gray-900 mt-1">@Model.TotalUsage</dd>
                                <dd class="text-sm text-gray-600 mt-1">Last 30 days</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>

            <div class="bg-white overflow-hidden shadow-lg rounded-xl hover:shadow-xl transition-shadow duration-300 transform hover:-translate-y-1">
                <div class="p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-gradient-to-br from-green-500 to-green-600 rounded-xl p-4 shadow-inner">
                            <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <div class="ml-6 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Recent Activities</dt>
                                <dd class="text-2xl font-bold text-gray-900 mt-1">@Model.RecentActivities.Count</dd>
                                <dd class="text-sm text-gray-600 mt-1">Active sessions</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-white overflow-hidden shadow-lg rounded-xl hover:shadow-xl transition-shadow duration-300 transform hover:-translate-y-1">
                <div class="p-6">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl p-4 shadow-inner">
                            <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                            </svg>
                        </div>
                        <div class="ml-6 w-0 flex-1">
                            <dl>
                                <dt class="text-sm font-medium text-gray-500 truncate">Subscription Status</dt>
                                <dd class="text-2xl font-bold text-gray-900 mt-1">Active</dd>
                                <dd class="text-sm text-green-600 mt-1">Premium Plan</dd>
                            </dl>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Image Descriptions -->
        <div class="mt-12">
            @Html.AntiForgeryToken()
            <div class="bg-white shadow-lg rounded-xl overflow-hidden hover:shadow-xl transition-shadow duration-300">
                <div class="px-6 py-5 border-b border-gray-200 flex justify-between items-center">
                    <div>
                        <h3 class="text-xl font-bold text-gray-900">Image Descriptions</h3>
                        <p class="mt-1 text-sm text-gray-500">Your recent AI-generated image descriptions</p>
                    </div>
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                        @Model.ImageDescriptions.Count() Total
                    </span>
                </div>
                <ul class="divide-y divide-gray-100">
                    @foreach (var description in Model.ImageDescriptions)
                    {
                        <li class="px-6 py-4 hover:bg-gray-50 transition-colors duration-150">
                            <div class="flex justify-between items-start">
                                <div class="flex-grow">
                                    <div class="text-sm font-medium text-gray-900">@description.Description</div>
                                    <div class="mt-1 flex items-center text-sm text-gray-500">
                                        <svg class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        @description.CreatedAt.ToString("MMM dd, yyyy")
                                    </div>
                                </div>
                                <div class="flex space-x-3">
                                    <button onclick="openEditModal('@description.Id', '@description.Description', '/Dashboard/UpdateImageDescription')" class="text-sm text-indigo-600 hover:text-indigo-900 font-medium">Edit</button>
                                    <button onclick="deleteItem('@description.Id', 'deleteImageDescriptionModal')" class="text-sm text-red-600 hover:text-red-900 font-medium">Delete</button>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Delete Image Description Modal -->
        <div id="deleteImageDescriptionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-medium text-gray-900">Confirm Delete</h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500">Are you sure you want to delete this image description?</p>
                        <input type="hidden" id="deleteId">
                    </div>
                    <div class="mt-4 flex justify-end space-x-3">
                        <button onclick="closeModal('deleteImageDescriptionModal')" class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 text-sm font-medium rounded-md">Cancel</button>
                        <button onclick="confirmDelete('/Dashboard/DeleteImageDescription', 'deleteImageDescriptionModal')" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white text-sm font-medium rounded-md">Delete</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Business Names -->
        <div class="mt-8">
            <div class="bg-white shadow-lg rounded-xl overflow-hidden hover:shadow-xl transition-shadow duration-300">
                <div class="px-6 py-5 border-b border-gray-200 flex justify-between items-center">
                    <div>
                        <h3 class="text-xl font-bold text-gray-900">Business Names</h3>
                        <p class="mt-1 text-sm text-gray-500">AI-generated business name suggestions</p>
                    </div>
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800">
                        @Model.BusinessNames.Count() Generated
                    </span>
                </div>
                <ul class="divide-y divide-gray-100">
                    @foreach (var businessName in Model.BusinessNames)
                    {
                        <li class="px-6 py-4 hover:bg-gray-50 transition-colors duration-150">
                            <div class="flex justify-between items-start">
                                <div class="flex-grow">
                                    <div class="text-base font-semibold text-indigo-600">@businessName.Name</div>
                                    <div class="mt-1 flex items-center text-sm text-gray-500">
                                        <svg class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        @businessName.CreatedAt.ToString("MMM dd, yyyy")
                                    </div>
                                </div>
                                <div class="flex space-x-3">
                                    <button onclick="openEditModal('@businessName.Id', '@businessName.Name', '/Dashboard/UpdateBusinessName')" class="text-sm text-indigo-600 hover:text-indigo-900 font-medium">Edit</button>
                                    <button onclick="deleteItem('@businessName.Id', 'deleteBusinessNameModal')" class="text-sm text-red-600 hover:text-red-900 font-medium">Delete</button>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Delete Business Name Modal -->
        <div id="deleteBusinessNameModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-medium text-gray-900">Confirm Delete</h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500">Are you sure you want to delete this business name?</p>
                        <input type="hidden" id="deleteId">
                    </div>
                    <div class="mt-4 flex justify-end space-x-3">
                        <button onclick="closeModal('deleteBusinessNameModal')" class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 text-sm font-medium rounded-md">Cancel</button>
                        <button onclick="confirmDelete('/Dashboard/DeleteBusinessName', 'deleteBusinessNameModal')" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white text-sm font-medium rounded-md">Delete</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Instagram Captions -->
        <div class="mt-8">
            <div class="bg-white shadow-lg rounded-xl overflow-hidden hover:shadow-xl transition-shadow duration-300">
                <div class="px-6 py-5 border-b border-gray-200 flex justify-between items-center">
                    <div>
                        <h3 class="text-xl font-bold text-gray-900">Instagram Captions</h3>
                        <p class="mt-1 text-sm text-gray-500">Your AI-generated Instagram captions</p>
                    </div>
                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-pink-100 text-pink-800">
                        @Model.InstagramCaptions.Count() Captions
                    </span>
                </div>
                <ul class="divide-y divide-gray-100">
                    @foreach (var caption in Model.InstagramCaptions)
                    {
                        <li class="px-6 py-4 hover:bg-gray-50 transition-colors duration-150">
                            <div class="flex justify-between items-start">
                                <div class="flex-grow">
                                    <div class="text-sm font-medium text-gray-900">@caption.Text</div>
                                    <div class="mt-1 flex items-center text-sm text-gray-500">
                                        <svg class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        @caption.CreatedAt.ToString("MMM dd, yyyy")
                                    </div>
                                </div>
                                <div class="flex space-x-3">
                                    <button onclick="openEditModal('@caption.Id', '@caption.Text', '/Dashboard/UpdateCaption')" class="text-sm text-indigo-600 hover:text-indigo-900 font-medium">Edit</button>
                                    <button onclick="deleteItem('@caption.Id', 'deleteCaptionModal')" class="text-sm text-red-600 hover:text-red-900 font-medium">Delete</button>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>

        <!-- Edit Caption Modal -->
        <div id="editCaptionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-medium text-gray-900">Edit Caption</h3>
                    <div class="mt-2">
                        <input type="hidden" id="editId">
                        <textarea id="editCaptionText" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" rows="4"></textarea>
                    </div>
                    <div class="mt-4 flex justify-end space-x-3">
                        <button onclick="closeModal('editCaptionModal')" class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 text-sm font-medium rounded-md">Cancel</button>
                        <button onclick="saveItem('/Dashboard/UpdateCaption', 'editCaptionModal', 'editCaptionText')" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-md">Save</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Caption Modal -->
        <div id="deleteCaptionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-medium text-gray-900">Delete Caption</h3>
                    <div class="mt-2">
                        <p class="text-sm text-gray-500">Are you sure you want to delete this caption? This action cannot be undone.</p>
                        <input type="hidden" id="deleteId">
                    </div>
                    <div class="mt-4 flex justify-end space-x-3">
                        <button onclick="closeModal('deleteCaptionModal')" class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 text-sm font-medium rounded-md">Cancel</button>
                        <button onclick="confirmDelete('/Dashboard/DeleteCaption', 'deleteCaptionModal')" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white text-sm font-medium rounded-md">Delete</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- User Activities -->
        <div class="mt-8">
            <div class="bg-white shadow-lg rounded-xl overflow-hidden hover:shadow-xl transition-shadow duration-300">
                <div class="px-6 py-5 border-b border-gray-200 flex justify-between items-center">
                    <div>
                        <h3 class="text-xl font-bold text-gray-900">User Activities</h3>
                        <p class="mt-1 text-sm text-gray-500">Track your recent actions and interactions</p>
                    </div>
                    @if (Model.UserActivities != null && Model.UserActivities.Any())
                    {
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                            @Model.UserActivities.Count() Activities
                        </span>
                    }
                </div>
               
        <!-- Generic Edit Modal -->
        <div id="editModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-medium text-gray-900">Edit Data</h3>
                    <div class="mt-2">
                        <label for="editField" class="block text-sm font-medium text-gray-700">Edit Field</label>
                        <textarea id="editField" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" rows="4"></textarea>
                    </div>
                    <div class="mt-4 flex justify-end space-x-3">
                        <button onclick="closeModal('editModal')" class="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-800 text-sm font-medium rounded-md">Cancel</button>
                        <button onclick="saveEditedData()" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-md">Save</button>
                    </div>
                </div>
            </div>
        </div>

        @await Html.PartialAsync("_BlogPosts", Model.BlogPosts)
        @await Html.PartialAsync("_Stories", Model.Stories)

        <script>
            let currentEditId = null;
            let currentEditUrl = null;

            function openEditModal(id, content, url) {
                currentEditId = id;
                currentEditUrl = url;
                document.getElementById('editField').value = content;
                document.getElementById('editModal').classList.remove('hidden');
            }

            function closeModal(modalId) {
                document.getElementById(modalId).classList.add('hidden');
            }

            function saveEditedData() {
                const updatedContent = document.getElementById('editField').value;
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const data = {
                    Id: currentEditId,
                    Content: updatedContent
                };

                fetch(currentEditUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Data updated successfully!');
                        window.location.reload();
                    } else {
                        alert('Failed to update data: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating data.');
                });
            }

            function deleteItem(id, modalId) {
                document.getElementById('deleteId').value = id;
                document.getElementById(modalId).classList.remove('hidden');
            }

            function confirmDelete(url, modalId) {
                const id = document.getElementById('deleteId').value;
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(id)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        alert('Failed to delete. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting.');
                });
            }

            function openEditUserDataModal(user) {
                document.getElementById('userNameInput').value = user.name;
                document.getElementById('userEmailInput').value = user.email;
                document.getElementById('userNicknameInput').value = user.nickname;
                document.getElementById('editUserDataModal').classList.remove('hidden');
            }

            function editUserData() {
                const userName = document.getElementById('userNameInput').value;
                const userEmail = document.getElementById('userEmailInput').value;
                const userNickname = document.getElementById('userNicknameInput').value;
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                const data = {
                    Name: userName,
                    Email: userEmail,
                    Nickname: userNickname
                };

                fetch('/Dashboard/EditUserData', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(data)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('User data updated successfully!');
                        window.location.reload();
                    } else {
                        alert('Failed to update user data: ' + data.error);
                    }
