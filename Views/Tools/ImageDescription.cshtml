@{
    ViewData["Title"] = "AI Image Description Generator";
}

<main class="min-h-screen bg-gradient-to-b from-[#caf0f8] to-white py-12">
    <div class="max-w-4xl mx-auto px-4">
        <div class="text-center mb-10">
            <h1 class="text-4xl font-bold text-[#03045e] mb-4">AI Image Description Generator</h1>
            <p class="text-lg text-gray-600">Upload an image and let our AI generate detailed, accurate descriptions</p>
        </div>

        <div class="bg-white rounded-xl shadow-lg p-8 mb-8">
            <div id="upload-container" class="border-2 border-dashed border-[#48cae4] rounded-lg p-8 text-center cursor-pointer hover:border-[#0077b6] transition-colors">
                <input type="file" id="image-input" class="hidden" accept="image/*">
                <div class="space-y-4">
                    <div class="w-16 h-16 mx-auto bg-[#ade8f4] rounded-full flex items-center justify-center">
                        <svg class="w-8 h-8 text-[#0077b6]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-700">Drag and drop your image here</h3>
                    <p class="text-gray-500">or click to browse</p>
                    <p class="text-sm text-gray-400">Supports: JPG, PNG, GIF (max 5MB)</p>
                </div>
            </div>

            <div id="preview-container" class="hidden mt-8">
                <h3 class="text-lg font-semibold text-gray-700 mb-4">Preview</h3>
                <div class="relative rounded-lg overflow-hidden">
                    <img id="image-preview" class="w-full h-auto" src="#" alt="Preview">
                    <button id="remove-image" class="absolute top-2 right-2 bg-red-500 text-white p-2 rounded-full hover:bg-red-600 focus:outline-none">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
            </div>

            <div class="mt-6 text-center">
                <button id="generate-btn" class="bg-[#0077b6] text-white px-8 py-3 rounded-lg font-semibold hover:bg-[#023e8a] transition-colors disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                    Generate Description
                </button>
            </div>
        </div>

        <div id="result-container" class="hidden bg-white rounded-xl shadow-lg p-8">
            <h3 class="text-xl font-semibold text-gray-700 mb-4">Generated Description</h3>
            <div id="description-content" class="prose max-w-none text-gray-600">
            
            </div>
            <div class="mt-6 flex justify-end space-x-4">
                <button id="copy-btn" class="px-4 py-2 border border-[#0077b6] text-[#0077b6] rounded-lg hover:bg-[#0077b6] hover:text-white transition-colors">
                    Copy to Clipboard
                </button>
                <button id="regenerate-btn" class="px-4 py-2 bg-[#0077b6] text-white rounded-lg hover:bg-[#023e8a] transition-colors">
                    Regenerate
                </button>
            </div>
        </div>
    </div>
</main>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const uploadContainer = document.getElementById('upload-container');
            const imageInput = document.getElementById('image-input');
            const previewContainer = document.getElementById('preview-container');
            const imagePreview = document.getElementById('image-preview');
            const removeImageBtn = document.getElementById('remove-image');
            const generateBtn = document.getElementById('generate-btn');
            const resultContainer = document.getElementById('result-container');
            const descriptionContent = document.getElementById('description-content');
            const copyBtn = document.getElementById('copy-btn');
            const regenerateBtn = document.getElementById('regenerate-btn');

            // Handle drag and drop
            uploadContainer.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadContainer.classList.add('border-[#0077b6]');
            });

            uploadContainer.addEventListener('dragleave', () => {
                uploadContainer.classList.remove('border-[#0077b6]');
            });

            uploadContainer.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadContainer.classList.remove('border-[#0077b6]');
                const file = e.dataTransfer.files[0];
                handleImageUpload(file);
            });

            // Handle click to upload
            uploadContainer.addEventListener('click', () => {
                imageInput.click();
            });

            imageInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                handleImageUpload(file);
            });

            // Handle image upload
            function handleImageUpload(file) {
                if (file && file.type.startsWith('image/')) {
                    if (file.size > 5 * 1024 * 1024) {
                        alert('Image size must be less than 5MB');
                        return;
                    }

                    const reader = new FileReader();
                    reader.onload = (e) => {
                        imagePreview.src = e.target.result;
                        previewContainer.classList.remove('hidden');
                        generateBtn.disabled = false;
                        resultContainer.classList.add('hidden');
                    };
                    reader.readAsDataURL(file);
                } else {
                    alert('Please upload a valid image file');
                }
            }

            // Remove image
            removeImageBtn.addEventListener('click', () => {
                imageInput.value = '';
                previewContainer.classList.add('hidden');
                generateBtn.disabled = true;
                resultContainer.classList.add('hidden');
            });

            // Generate description
            generateBtn.addEventListener('click', async () => {
                if (!imageInput.files[0]) {
                    alert('Please select an image first.');
                    return;
                }
                generateBtn.disabled = true;
                generateBtn.textContent = 'Generating...';

                const formData = new FormData();
                formData.append('image', imageInput.files[0]);
                formData.append('mood', 'neutral'); // placeholder parameter if needed

                try {
                    const response = await fetch('/api/tools/generate-image-description', {
                        method: 'POST',
                        body: formData
                    });

                    const data = await response.json();
                    let description = '';
                    if(data.description){
                        description = data.description;
                    }else if(data.error){
                        description = 'Error: ' + data.error;
                    }else{
                        description = 'No description generated.';
                    }
                    descriptionContent.textContent = description;
                    resultContainer.classList.remove('hidden');
                } catch (error) {
                    alert('Error generating description. Please try again.');
                } finally {
                    generateBtn.disabled = false;
                    generateBtn.textContent = 'Generate Description';
                }
            });

            // Copy to clipboard
            copyBtn.addEventListener('click', async () => {
                const text = descriptionContent.textContent;
                if (!text) {
                    alert('No description to copy!');
                    return;
                }
                try {
                    await navigator.clipboard.writeText(text);
                    const originalText = copyBtn.textContent;
                    copyBtn.textContent = 'Copied!';
                    setTimeout(() => { copyBtn.textContent = originalText; }, 2000);
                } catch (err) {
                    alert('Failed to copy description');
                }
            });

            // Create and add Share button
            const shareBtn = document.createElement('button');
            shareBtn.textContent = 'Share';
            shareBtn.className = 'px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors';
            copyBtn.parentNode.insertBefore(shareBtn, regenerateBtn);

            shareBtn.addEventListener('click', async () => {
                const text = descriptionContent.textContent;
                if (!text) {
                    alert('No description to share!');
                    return;
                }
                if (navigator.share) {
                    try {
                        await navigator.share({ title: 'AI Image Description', text: text });
                    } catch (err) {
                        console.log('Share cancelled or failed');
                    }
                } else {
                    alert('Sharing not supported on this device/browser.');
                }
            });
            // Regenerate description
            regenerateBtn.addEventListener('click', () => {
                generateBtn.click();
            });
        });
    </script>
}